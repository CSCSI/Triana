Changes by Ian Taylor - 23-24 September

1) Configuration
    Added a org.trianacode.config package that contains the following classes:

    a) Argument Parser - Simple convenience class to make command lines easier to deal with.
    The String[] is converted into a hashtable of key/value pairs that contain the various command
    line arguments that the user has supplied.  It also allows you to add prefixes for
    identifying arguments and you can return a String[] or a List or values for each
    parameter

    b) Locations - this is  rehash of Home, which allows you to find out about the home directory of
    the Jar (or dist) but also the home directory of triana where all the toolboxes live (getHomeProper).
    It also allows you to find the application directory and the config file. The new config file
    is named org.trianacode.properties and is in the app data directory.

    c) Property Loader - Property  This tries several ways of initialising the properties.   There are
    two main use cases:
        -- When app is ran from the command line
        -- When app is embedded.

    When run from the command line the system defaults to its default values by loading in from the triana
    properties file in the app directory or from default values.  When ran from an app,
    it starts with the values passed from a properties object (if available).   Thereafter, it
    goes through a sequence of searching the property file list if available and then overriding any
    property with a property that has been defined using the System properties.

    d) TrianaProperties - The TrianaProperties class stores the properties for a Triana instance.  Triana properties
    are propagated through all the relevant Triana classes so that oneset of properties can be
    used per triana instance. TrianaProperties also contains a default configuration that is
    packaged with Triana as shipped.  These properties can be altered by any third party
    application to configure the look and feel and locations for the various toolboxes,
    templates etc.

    e) ResourceManagement - Class that attempts to look in various places for a specified file and its type.
    At the core of this class is the loading mechnism which currently attempts to load in the file from either
    the specified path or from the classpath (e.g. a jar).   It then performs a number of higher level
    searches for the file based on the file type, which can be specified as an argument.   For example,
    if a file type is a tool, then it will iterate through all of the toolbox paths and attempt to
    load the resource from each location. It will then try the classpath to see if this resource can
    be found there.

 2) General
    - change the name of EngineInit to TrianaInstance and made all references NON STATIC and propagated
    these through the many classes that expected static references.  Also configured this so that it can accept
    command line arguments (need to be defined) and it now creates all of the necessary classes required by
    an instance e.g. properties.
    - ToolResolver - moved this into the discovery package and also modified the toolbox loading so that it
    uses the properties.  It also has correct defaults for the toolboxes for the triana-toolboxes and
    triana-pegasus
    - updated all of the velocity components to use the Triana properties to find their templates so these can
    be configured.


COMMENTS
========

Properties have been tested and the various propaggation of property values seems good.  We now
have a triana instance!

ResourceManagement - not tested yet - not had chance to look at the velocity stuff to try this out

Arguments - not tested at all yet but the groundwork is there.